package p1;

import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;



public class Exe1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		System.out.println("Enter number of threds");
		Scanner scanner = new Scanner(System. in); 
		String input = scanner. nextLine();
		
		System.out.println("Enter number of tasks");
		String input2=scanner.nextLine();
		
		 // create a pool of threads, 10 max jobs will execute in parallel
		ExecutorService threadPool = Executors.newFixedThreadPool(Integer.parseInt(input));
		
		
		 // submit jobs to be executing by the pool
		for (int i = 0; i < Integer.parseInt(input2); i++) {
		    threadPool.submit(new Runnable() {
		         public void run() {
		        	 Counter.inc();
		             // some code to run in parallel
		         }
		     });
		 }
		 // once you've submitted your last job to the service it should be shut down
		 threadPool.shutdown();
		 // wait for the threads to finish if necessary
		 try {
			threadPool.awaitTermination(Long.MAX_VALUE, TimeUnit.HOURS);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		 System.out.println(Counter.count);
		
	}
	static class Counter{
	    static int count;
	    static void inc() {
	        count = count+1;
	    }
	    int getCount() {
	        return count;
	    }
	}

}
